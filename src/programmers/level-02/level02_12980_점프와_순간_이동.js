/**
 * [요구사항]
 * K 칸 앞으로 점프 : K 만큼 건전지 사용량 줄어듬
 * 순간이동(현재까지 온 거리 × 2) : 건전지 사용량 없음
 * 건전지 사용량은 최소화하면서 N만큼 떨어져 있는 장소로 이동
 * 매개변수 : N = 1 <= 10억, K = 1이상 자연수
 * e.g. 거리(N)가 5만큼 떨어져 있는 장소로 갈 때
 * 1. 처음 위치 0에서 5칸 앞으로 점프 : 건전지 사용량 5
 * 2. 시작 -> 2칸 점프 -> 순간 이동(2*2=4) -> 1칸 점프 : 건전지 사용량 3
 * 3. 시작 -> 1칸 점프 -> 순간 이동(1*2=2) -> 순간 이동(2*2=4) -> 1칸 점프 : 건전지 사용량 2
 */

/**
 * [풀이방법]
 * 목적지부터 반대로 계산해보면 짝수 거리는 순간 이동을 통해 2로 나누면 되고,
 * 홀수 거리는 점프에서 1을 빼서 짝수로 만든 후 다시 순간 이동하면 됨.
 * 즉, 목적지 N이 주어졌을 때 짝수면 2로 나누고, 홀수면 1을 빼는 과정을 반복해서
 * 1을 뺀 횟수가 최소 건전지 사용량이 됨
 */

function solution(n) {
  let rest = n;
  let c = 0;

  while (rest > 0) {
    if (rest % 2 !== 0) {
      rest -= 1;
      c++;
    } else rest /= 2;
  }

  return c;
}

const cases = [
  {
    input: 5,
    output: 2,
  },
  {
    input: 6,
    output: 2,
  },
  {
    input: 5000,
    output: 5,
  },
];

console.log(solution(cases[1].input));
