/**
 * 요구사항
 * 마을의 개수 N, 각 마을을 연결하는 도로의 정보 road, 음식 배달이 가능한 시간 K
 * 1번 마을에 있는 음식점이 K 이하의 시간에 배달할 수 있는 마을의 개수 반환
 * 마을의 개수 N: 1 <= N <= 50
 * 도로 정보 road: [[a, b, c], [...]]
 * a, b는 두 마을의 번호, c는 두 마을의 거리
 * a, b를 연결하는 도로는 여러개 있을 수 있음
 * 배달 가능한 시간: 1 <= K <= 500,000
 */

/**
 * 예시 1
 * N = 5, road = [[1,2,1],[2,3,3],[5,2,2],[1,4,2],[5,3,1],[5,4,2]], K = 3
 * 1번 마을 : 1
 * 2번 마을 : 1
 * 3번 마을 : 4 -> (1번에서 2번 마을 1) + (2번에서 3번 마을 3) = 4
 * 4번 마을 : 2
 * 5번 마을 : 3 -> (1에서 2번 마을 1) + (5에서 2번 마을 3) = 3
 * 거리 3이하 마을 [1, 2, 4, 5] -> 4
 */

/**
 * 예시 2
 * N = 6, road = [[1,2,1],[1,3,2],[2,3,2],[3,4,3],[3,5,2],[3,5,3],[5,6,1]], K = 4
 * 1번 마을 : 1
 * 2번 마을 : 1
 * 3번 마을 : 2
 * 4번 마을 : 2 + 3 = 5
 * 5번 마을 : 2 + 2 = 4
 * 6번 마을 : 4 + 1 = 5
 * 거리 4이하 마을 [1, 2, 3, 5] -> 4
 */

function solution(N, road, K) {
  const answer = 0;

  // [실행] 버튼을 누르면 출력 값을 볼 수 있습니다.
  console.log('Hello Javascript');

  return answer;
}

const cases = [
  {
    input: [
      5, // N
      [
        [1, 2, 1],
        [2, 3, 3],
        [5, 2, 2],
        [1, 4, 2],
        [5, 3, 1],
        [5, 4, 2],
      ], // road
      3, // K
    ],
    output: 4,
  },
  {
    input: [
      6, // N
      [
        [1, 2, 1],
        [1, 3, 2],
        [2, 3, 2],
        [3, 4, 3],
        [3, 5, 2],
        [3, 5, 3],
        [5, 6, 1],
      ], // road
      4, // K
    ],
    output: 4,
  },
];
