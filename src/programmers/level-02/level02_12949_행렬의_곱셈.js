/**
 * 요구사항
 * 2차원 행렬 arr1, arr2를 받아 arr1에 arr2를 곱한 결과 반환
 * arr1의 n번째 행과 * arr2의 m번째 열의 각 요소를 곱한 후 그 결과를 모두 합산하여 결과 행렬의 [n, m] 위치의 값을 얻는다
 * 행렬곱 설명은 나무위키 예시를 보면 이해하기 좋음 @see https://namu.wiki/w/%ED%96%89%EB%A0%AC%EA%B3%B1#toc
 */

function solution(arr1, arr2) {
  const { length } = arr2[0];

  return arr1.map((row) => {
    return Array.from({ length }, (_, i) => {
      return row.reduce((acc, cur, idx) => acc + arr2[idx][i] * cur, 0);
    });
  });
}

const cases = [
  {
    input: [
      [
        [1, 4],
        [3, 2],
        [4, 1],
      ], // arr1
      [
        [3, 3],
        [3, 3],
      ], // arr2
    ],
    output: [
      [15, 15], // [(1*3)+(4*3), (1*3)+(4*3)]
      [15, 15], // [(3*3)+(2*3), (3*3)+(2*3)]
      [15, 15], // [(4*3)+(1*3), (4*3)+(1*3)]
    ],
  },
  {
    input: [
      [
        [2, 3, 2],
        [4, 2, 4],
        [3, 1, 4],
      ], // arr1
      [
        [5, 4, 3],
        [2, 4, 1],
        [3, 1, 1],
      ], // arr2
    ],
    output: [
      [22, 22, 11], // [(2*5)+(3*2)+(2*3), (2*4)+(3*4)+(2*1), (2*3)+(3*1)+(2*1)]
      [36, 28, 18], // [(4*5)+(2*2)+(4*3), (4*4)+(2*4)+(4*1), (4*3)+(2*1)+(4*1)]
      [29, 20, 14], // [(3*5)+(1*2)+(4*3), (3*4)+(1*4)+(4*1), (3*3)+(1*1)+(4*1)]
    ],
  },
];

console.log(solution(...cases[1].input));
