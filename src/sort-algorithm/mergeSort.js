/* eslint-disable no-param-reassign */
// 노션 노트 : https://www.notion.so/colorfilter/TIL-6b2c98fc9bfa4f8b901d21c988917707
import { Compare, defaultCompare, makeRandomArr } from '../utils.js';

const merge = (left, right, compare) => {
  let i = 0; // left 리스트 인덱스
  let j = 0; // right 리스트 인덱스
  const result = [];
  // left 혹은 right 의 모든 요소가 result 배열에 추가될 때까지 반복
  while (i < left.length && j < right.length) {
    const isLeft = compare(left[i], right[j]) === Compare.LESS_THAN;
    result.push(isLeft ? left[i++] : right[j++]);
  }
  // 남은 요소를 result 배열에 추가
  return result.concat(i < left.length ? left.slice(i) : right.slice(j));
};

const mergeSort = (arr, compare = defaultCompare) => {
  // 배열 길이가 1이 될때까지 배열 분할
  if (arr.length > 1) {
    const { length } = arr;
    const middle = Math.floor(length / 2); // [분할] | [5, 4, 3, 2, 1] -> middle: 2, ...
    const left = mergeSort(arr.slice(0, middle)); // [정복] | [5, 4], ...
    const right = mergeSort(arr.slice(middle, length)); // [정복] | [3, 2, 1], ...
    arr = merge(left, right, compare); // [결합]
  }
  return arr;
};

const randomArr = makeRandomArr(20, 20);
mergeSort(randomArr);
mergeSort([21, 10, 12, 20, 25, 13, 15, 22]); // [10, 12, 13, 15, 20, 21, 22, 25]

/* 분할 / 정복
f([21, 10, 12, 20, 25, 13, 15, 22])
==============================================
middle = 4
⑴ left = f([21, 10, 12, 20]) | [L-1] -> [10, 12, 20, 21]
⑾ right = f([25, 13, 15, 22]) | [R-4] -> [13, 15, 22, 25]
㉑ arr = merge([10, 12, 20, 21], [13, 15, 22, 25]) | [M-7] -> [10, 12, 13, 15, 20, 21, 22, 25]
return [10, 12, 13, 15, 20, 21, 22, 25]

[L-1] f([21, 10, 12, 20])
==============================================
middle = 2
⑵ left = f([21, 10]) | [L-2] -> [10, 21]
⑹ right = f([12, 20]) | [R-2] -> [12, 20]
⑽ arr = merge([10, 21], [12, 20]) | [M-3] -> [10, 12, 20, 21]
return [10, 12, 20, 21]

[L-2] f([21, 10])
==============================================
middle = 1
⑶ left = f([21]) -> [L-3] -> [21]
⑷ right = f([10]) -> [R-1] -> [10]
⑸ arr = merge([21], [10]) | [M-1] -> [10, 21]
return [10, 21]

[R-2] f([12, 20])
==============================================
middle = 1
⑺ left = f([12]) -> [L-4] -> [12]
⑻ right = f([20]) -> [R-3] -> [20]
⑼ arr = merge([12], [20]) | [M-2] -> [12, 20]
return [12, 20]

[R-4] f([25, 13, 15, 22])
==============================================
middle = 2
⑿ left = f([25, 13]) | [L-5] -> [13, 25]
⒃ right = f([15, 22]) | [R-6] -> [15, 22]
⒇ arr = merge([13, 25], [15, 22]) | [M-6] -> [13, 15, 22, 25]
return [13, 15, 22, 25]

[L-5] f([25, 13])
==============================================
middle = 1
⒀ left = f([25]) -> [L-6] -> [25]
⒁ right = f([13]) -> [R-5] -> [13]
⒂ arr = merge([25], [13]) | [M-4] -> [13, 25]
return [13, 25]

[R-6] f([15, 22])
==============================================
middle = 1
⒄ left = f([15]) -> [L-7] -> [15]
⒅ right = f([22]) -> [R-7] -> [22]
⒆ arr = merge([15], [22]) -> [M-5] -> [15, 22]
*/

/* 병합
 [M-1] merge([21], [10])
===============================================
i = 0 / j = 0 -> 21 vs 10 -> [10] | i++
return [10, 21]

[M-2] merge([12], [20])
===============================================
i = 0 / j = 0 -> 12 vs 20 -> [12] | i++
return [12, 20]

[M-3] merge([10, 21], [12, 20])
===============================================
i = 0 / j = 0 -> 10 vs 12 -> [10] | i++
i = 1 / j = 0 -> 21 vs 12 -> [10, 12] | j++
i = 1 / j = 1 -> 21 vs 20 -> [10, 12, 20] | j++
return [10, 12, 20, 21]

[M-4] merge([25], [13])
===============================================
i = 0 / j = 0 -> 25 vs 13 -> [13] | j++
return [13, 25]

[M-5] merge([15], [22])
===============================================
i = 0 / j = 0 -> 15 vs 22 -> [15] | i++
return [15, 22]

[M-6] merge([13, 25], [15, 22])
===============================================
i = 0 / j = 0 -> 13 vs 15 -> [13] | i++
i = 1 / j = 0 -> 25 vs 15 -> [13, 15] | j++
i = 1 / j = 1 -> 25 vs 22 -> [13, 15, 22] | j++
return [13, 15, 22, 25]

[M-7] merge([10, 12, 20, 21], [13, 15, 22, 25])
===============================================
i = 0 / j = 0 -> 10 vs 13 -> [10] | i++
i = 1 / j = 0 -> 12 vs 13 -> [10, 12] | i++
i = 2 / j = 0 -> 20 vs 13 -> [10, 12, 13] | j++
i = 2 / j = 1 -> 20 vs 15 -> [10, 12, 13, 15] | j++
i = 2 / j = 2 -> 20 vs 22 -> [10, 12, 13, 15, 20] | i++
i = 3 / j = 2 -> 21 vs 22 -> [10, 12, 13, 15, 20, 21] | i++
return [10, 12, 13, 15, 20, 21, 22, 25]
*/
